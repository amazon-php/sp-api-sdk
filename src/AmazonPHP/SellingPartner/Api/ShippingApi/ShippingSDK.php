<?php

declare(strict_types=1);

namespace AmazonPHP\SellingPartner\Api\ShippingApi;

use AmazonPHP\SellingPartner\AccessToken;
use AmazonPHP\SellingPartner\Configuration;
use AmazonPHP\SellingPartner\Exception\ApiException;
use AmazonPHP\SellingPartner\Exception\InvalidArgumentException;
use AmazonPHP\SellingPartner\HttpFactory;
use AmazonPHP\SellingPartner\HttpSignatureHeaders;
use AmazonPHP\SellingPartner\ObjectSerializer;
use Psr\Http\Client\ClientExceptionInterface;
use Psr\Http\Client\ClientInterface;
use Psr\Http\Message\RequestInterface;
use Psr\Log\LoggerInterface;

/**
* Amazon Shipping API
*
* The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
*
* The version of the OpenAPI document: v2
*
* This class was auto-generated by https://openapi-generator.tech
* Do not change it, it will be overwritten with next execution of /bin/generate.sh
*/
final class ShippingSDK implements ShippingSDKInterface
{
    private ClientInterface $client;

    private HttpFactory $httpFactory;

    private Configuration $configuration;

    private LoggerInterface $logger;

    public function __construct(ClientInterface $client, HttpFactory $requestFactory, Configuration $configuration, LoggerInterface $logger)
    {
        $this->client = $client;
        $this->httpFactory = $requestFactory;
        $this->configuration = $configuration;
        $this->logger = $logger;
    }

    /**
     * Operation cancelShipment
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id  The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\CancelShipmentResponse
     */
    public function cancelShipment(AccessToken $accessToken, string $region, $shipment_id, $x_amzn_shipping_business_id = null)
    {
        $request = $this->cancelShipmentRequest($accessToken, $region, $shipment_id, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'cancelShipment', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'cancelShipment')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'cancelShipment'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'cancelShipment',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'cancelShipment', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'cancelShipment')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'cancelShipment'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'cancelShipment',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\CancelShipmentResponse',
            []
        );
    }

    /**
     * Create request for operation 'cancelShipment'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id  The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function cancelShipmentRequest(AccessToken $accessToken, string $region, $shipment_id, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling cancelShipment'
            );
        }

        $resourcePath = '/shipping/v2/shipments/{shipmentId}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'PUT',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation directPurchaseShipment
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\DirectPurchaseRequest $body  body (required)
     * @param string|null $x_amzn_idempotency_key  A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param string|null $locale  The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags. (optional)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\DirectPurchaseResponse
     */
    public function directPurchaseShipment(AccessToken $accessToken, string $region, $body, $x_amzn_idempotency_key = null, $locale = null, $x_amzn_shipping_business_id = null)
    {
        $request = $this->directPurchaseShipmentRequest($accessToken, $region, $body, $x_amzn_idempotency_key, $locale, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'directPurchaseShipment', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'directPurchaseShipment')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'directPurchaseShipment'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'directPurchaseShipment',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'directPurchaseShipment', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'directPurchaseShipment')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'directPurchaseShipment'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'directPurchaseShipment',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\DirectPurchaseResponse',
            []
        );
    }

    /**
     * Create request for operation 'directPurchaseShipment'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\DirectPurchaseRequest $body  (required)
     * @param string|null $x_amzn_idempotency_key  A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param string|null $locale  The IETF Language Tag. Note that this only supports the primary language subtag with one secondary language subtag (i.e. en-US, fr-CA). The secondary language subtag is almost always a regional designation. This does not support additional subtags beyond the primary and secondary language subtags. (optional)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function directPurchaseShipmentRequest(AccessToken $accessToken, string $region, $body, $x_amzn_idempotency_key = null, $locale = null, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling directPurchaseShipment'
            );
        }

        $resourcePath = '/shipping/v2/shipments/directPurchase';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_idempotency_key !== null) {
            $headerParams['x-amzn-IdempotencyKey'] = ObjectSerializer::toHeaderValue($x_amzn_idempotency_key);
        }
        // header params
        if ($locale !== null) {
            $headerParams['locale'] = ObjectSerializer::toHeaderValue($locale);
        }
        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }



        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'POST',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation generateCollectionForm
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\GenerateCollectionFormRequest $body  body (required)
     * @param string|null $x_amzn_idempotency_key  A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\GenerateCollectionFormResponse
     */
    public function generateCollectionForm(AccessToken $accessToken, string $region, $body, $x_amzn_idempotency_key = null, $x_amzn_shipping_business_id = null)
    {
        $request = $this->generateCollectionFormRequest($accessToken, $region, $body, $x_amzn_idempotency_key, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'generateCollectionForm', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'generateCollectionForm')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'generateCollectionForm'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'generateCollectionForm',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'generateCollectionForm', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'generateCollectionForm')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'generateCollectionForm'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'generateCollectionForm',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\GenerateCollectionFormResponse',
            []
        );
    }

    /**
     * Create request for operation 'generateCollectionForm'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\GenerateCollectionFormRequest $body  (required)
     * @param string|null $x_amzn_idempotency_key  A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function generateCollectionFormRequest(AccessToken $accessToken, string $region, $body, $x_amzn_idempotency_key = null, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling generateCollectionForm'
            );
        }

        $resourcePath = '/shipping/v2/collectionForms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_idempotency_key !== null) {
            $headerParams['x-amzn-IdempotencyKey'] = ObjectSerializer::toHeaderValue($x_amzn_idempotency_key);
        }
        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }



        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'POST',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation getAccessPoints
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string[] $access_point_types  access_point_types (required)
     * @param string $country_code  country_code (required)
     * @param string $postal_code  postal_code (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\GetAccessPointsResponse
     */
    public function getAccessPoints(AccessToken $accessToken, string $region, $access_point_types, $country_code, $postal_code, $x_amzn_shipping_business_id = null)
    {
        $request = $this->getAccessPointsRequest($accessToken, $region, $access_point_types, $country_code, $postal_code, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'getAccessPoints', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'getAccessPoints')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getAccessPoints'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getAccessPoints',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'getAccessPoints', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'getAccessPoints')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getAccessPoints'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getAccessPoints',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\GetAccessPointsResponse',
            []
        );
    }

    /**
     * Create request for operation 'getAccessPoints'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string[] $access_point_types  (required)
     * @param string $country_code  (required)
     * @param string $postal_code  (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function getAccessPointsRequest(AccessToken $accessToken, string $region, $access_point_types, $country_code, $postal_code, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'access_point_types' is set
        if ($access_point_types === null || (is_array($access_point_types) && count($access_point_types) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $access_point_types when calling getAccessPoints'
            );
        }
        // verify the required parameter 'country_code' is set
        if ($country_code === null || (is_array($country_code) && count($country_code) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $country_code when calling getAccessPoints'
            );
        }
        // verify the required parameter 'postal_code' is set
        if ($postal_code === null || (is_array($postal_code) && count($postal_code) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $postal_code when calling getAccessPoints'
            );
        }

        $resourcePath = '/shipping/v2/accessPoints';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($access_point_types)) {
            $access_point_types = ObjectSerializer::serializeCollection($access_point_types, 'form', true);
        }
        if ($access_point_types !== null) {
            $queryParams['accessPointTypes'] = ObjectSerializer::toString($access_point_types);
        }
        // query params
        if (is_array($country_code)) {
            $country_code = ObjectSerializer::serializeCollection($country_code, '', true);
        }
        if ($country_code !== null) {
            $queryParams['countryCode'] = ObjectSerializer::toString($country_code);
        }
        // query params
        if (is_array($postal_code)) {
            $postal_code = ObjectSerializer::serializeCollection($postal_code, '', true);
        }
        if ($postal_code !== null) {
            $queryParams['postalCode'] = ObjectSerializer::toString($postal_code);
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }



        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'GET',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation getAdditionalInputs
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $request_token  The request token returned in the response to the getRates operation. (required)
     * @param string $rate_id  The rate identifier for the shipping offering (rate) returned in the response to the getRates operation. (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\GetAdditionalInputsResponse
     */
    public function getAdditionalInputs(AccessToken $accessToken, string $region, $request_token, $rate_id, $x_amzn_shipping_business_id = null)
    {
        $request = $this->getAdditionalInputsRequest($accessToken, $region, $request_token, $rate_id, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'getAdditionalInputs', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'getAdditionalInputs')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getAdditionalInputs'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getAdditionalInputs',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'getAdditionalInputs', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'getAdditionalInputs')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getAdditionalInputs'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getAdditionalInputs',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\GetAdditionalInputsResponse',
            []
        );
    }

    /**
     * Create request for operation 'getAdditionalInputs'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $request_token  The request token returned in the response to the getRates operation. (required)
     * @param string $rate_id  The rate identifier for the shipping offering (rate) returned in the response to the getRates operation. (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function getAdditionalInputsRequest(AccessToken $accessToken, string $region, $request_token, $rate_id, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'request_token' is set
        if ($request_token === null || (is_array($request_token) && count($request_token) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $request_token when calling getAdditionalInputs'
            );
        }
        // verify the required parameter 'rate_id' is set
        if ($rate_id === null || (is_array($rate_id) && count($rate_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $rate_id when calling getAdditionalInputs'
            );
        }

        $resourcePath = '/shipping/v2/shipments/additionalInputs/schema';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($request_token)) {
            $request_token = ObjectSerializer::serializeCollection($request_token, '', true);
        }
        if ($request_token !== null) {
            $queryParams['requestToken'] = ObjectSerializer::toString($request_token);
        }
        // query params
        if (is_array($rate_id)) {
            $rate_id = ObjectSerializer::serializeCollection($rate_id, '', true);
        }
        if ($rate_id !== null) {
            $queryParams['rateId'] = ObjectSerializer::toString($rate_id);
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }



        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'GET',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation getCarrierAccountFormInputs
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\GetCarrierAccountFormInputsResponse
     */
    public function getCarrierAccountFormInputs(AccessToken $accessToken, string $region, $x_amzn_shipping_business_id = null)
    {
        $request = $this->getCarrierAccountFormInputsRequest($accessToken, $region, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'getCarrierAccountFormInputs', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'getCarrierAccountFormInputs')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getCarrierAccountFormInputs'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getCarrierAccountFormInputs',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'getCarrierAccountFormInputs', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'getCarrierAccountFormInputs')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getCarrierAccountFormInputs'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getCarrierAccountFormInputs',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\GetCarrierAccountFormInputsResponse',
            []
        );
    }

    /**
     * Create request for operation 'getCarrierAccountFormInputs'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function getCarrierAccountFormInputsRequest(AccessToken $accessToken, string $region, $x_amzn_shipping_business_id = null) : RequestInterface
    {

        $resourcePath = '/shipping/v2/carrierAccountFormInputs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }



        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'GET',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation getCarrierAccounts
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\GetCarrierAccountsRequest $body  body (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\GetCarrierAccountsResponse
     */
    public function getCarrierAccounts(AccessToken $accessToken, string $region, $body, $x_amzn_shipping_business_id = null)
    {
        $request = $this->getCarrierAccountsRequest($accessToken, $region, $body, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'getCarrierAccounts', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'getCarrierAccounts')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getCarrierAccounts'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getCarrierAccounts',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'getCarrierAccounts', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'getCarrierAccounts')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getCarrierAccounts'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getCarrierAccounts',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\GetCarrierAccountsResponse',
            []
        );
    }

    /**
     * Create request for operation 'getCarrierAccounts'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\GetCarrierAccountsRequest $body  (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function getCarrierAccountsRequest(AccessToken $accessToken, string $region, $body, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling getCarrierAccounts'
            );
        }

        $resourcePath = '/shipping/v2/carrierAccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }



        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'PUT',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation getCollectionForm
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $collection_form_id  collection form Id to reprint a collection. (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\GetCollectionFormResponse
     */
    public function getCollectionForm(AccessToken $accessToken, string $region, $collection_form_id, $x_amzn_shipping_business_id = null)
    {
        $request = $this->getCollectionFormRequest($accessToken, $region, $collection_form_id, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'getCollectionForm', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'getCollectionForm')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getCollectionForm'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getCollectionForm',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'getCollectionForm', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'getCollectionForm')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getCollectionForm'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getCollectionForm',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\GetCollectionFormResponse',
            []
        );
    }

    /**
     * Create request for operation 'getCollectionForm'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $collection_form_id  collection form Id to reprint a collection. (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function getCollectionFormRequest(AccessToken $accessToken, string $region, $collection_form_id, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'collection_form_id' is set
        if ($collection_form_id === null || (is_array($collection_form_id) && count($collection_form_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $collection_form_id when calling getCollectionForm'
            );
        }

        $resourcePath = '/shipping/v2/collectionForms/{collectionFormId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }

        // path params
        if ($collection_form_id !== null) {
            $resourcePath = str_replace(
                '{' . 'collectionFormId' . '}',
                ObjectSerializer::toPathValue($collection_form_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'GET',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation getCollectionFormHistory
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\GetCollectionFormHistoryRequest $body  body (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\GetCollectionFormHistoryResponse
     */
    public function getCollectionFormHistory(AccessToken $accessToken, string $region, $body, $x_amzn_shipping_business_id = null)
    {
        $request = $this->getCollectionFormHistoryRequest($accessToken, $region, $body, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'getCollectionFormHistory', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'getCollectionFormHistory')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getCollectionFormHistory'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getCollectionFormHistory',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'getCollectionFormHistory', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'getCollectionFormHistory')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getCollectionFormHistory'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getCollectionFormHistory',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\GetCollectionFormHistoryResponse',
            []
        );
    }

    /**
     * Create request for operation 'getCollectionFormHistory'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\GetCollectionFormHistoryRequest $body  (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function getCollectionFormHistoryRequest(AccessToken $accessToken, string $region, $body, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling getCollectionFormHistory'
            );
        }

        $resourcePath = '/shipping/v2/collectionForms/history';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }



        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'PUT',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation getRates
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\GetRatesRequest $body  body (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\GetRatesResponse
     */
    public function getRates(AccessToken $accessToken, string $region, $body, $x_amzn_shipping_business_id = null)
    {
        $request = $this->getRatesRequest($accessToken, $region, $body, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'getRates', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'getRates')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getRates'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getRates',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'getRates', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'getRates')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getRates'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getRates',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\GetRatesResponse',
            []
        );
    }

    /**
     * Create request for operation 'getRates'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\GetRatesRequest $body  (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function getRatesRequest(AccessToken $accessToken, string $region, $body, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling getRates'
            );
        }

        $resourcePath = '/shipping/v2/shipments/rates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }



        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'POST',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation getShipmentDocuments
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id  The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param string $package_client_reference_id  The package client reference identifier originally provided in the request body parameter for the getRates operation. (required)
     * @param string|null $format  The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)
     * @param float|null $dpi  The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\GetShipmentDocumentsResponse
     */
    public function getShipmentDocuments(AccessToken $accessToken, string $region, $shipment_id, $package_client_reference_id, $format = null, $dpi = null, $x_amzn_shipping_business_id = null)
    {
        $request = $this->getShipmentDocumentsRequest($accessToken, $region, $shipment_id, $package_client_reference_id, $format, $dpi, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'getShipmentDocuments', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'getShipmentDocuments')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getShipmentDocuments'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getShipmentDocuments',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'getShipmentDocuments', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'getShipmentDocuments')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getShipmentDocuments'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getShipmentDocuments',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\GetShipmentDocumentsResponse',
            []
        );
    }

    /**
     * Create request for operation 'getShipmentDocuments'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $shipment_id  The shipment identifier originally returned by the purchaseShipment operation. (required)
     * @param string $package_client_reference_id  The package client reference identifier originally provided in the request body parameter for the getRates operation. (required)
     * @param string|null $format  The file format of the document. Must be one of the supported formats returned by the getRates operation. (optional)
     * @param float|null $dpi  The resolution of the document (for example, 300 means 300 dots per inch). Must be one of the supported resolutions returned in the response to the getRates operation. (optional)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function getShipmentDocumentsRequest(AccessToken $accessToken, string $region, $shipment_id, $package_client_reference_id, $format = null, $dpi = null, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'shipment_id' is set
        if ($shipment_id === null || (is_array($shipment_id) && count($shipment_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $shipment_id when calling getShipmentDocuments'
            );
        }
        // verify the required parameter 'package_client_reference_id' is set
        if ($package_client_reference_id === null || (is_array($package_client_reference_id) && count($package_client_reference_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $package_client_reference_id when calling getShipmentDocuments'
            );
        }

        $resourcePath = '/shipping/v2/shipments/{shipmentId}/documents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($package_client_reference_id)) {
            $package_client_reference_id = ObjectSerializer::serializeCollection($package_client_reference_id, '', true);
        }
        if ($package_client_reference_id !== null) {
            $queryParams['packageClientReferenceId'] = ObjectSerializer::toString($package_client_reference_id);
        }
        // query params
        if (is_array($format)) {
            $format = ObjectSerializer::serializeCollection($format, '', true);
        }
        if ($format !== null) {
            $queryParams['format'] = ObjectSerializer::toString($format);
        }
        // query params
        if (is_array($dpi)) {
            $dpi = ObjectSerializer::serializeCollection($dpi, '', true);
        }
        if ($dpi !== null) {
            $queryParams['dpi'] = ObjectSerializer::toString($dpi);
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }

        // path params
        if ($shipment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'shipmentId' . '}',
                ObjectSerializer::toPathValue($shipment_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'GET',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation getTracking
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $tracking_id  A carrier-generated tracking identifier originally returned by the purchaseShipment operation. (required)
     * @param string $carrier_id  A carrier identifier originally returned by the getRates operation for the selected rate. (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\GetTrackingResponse
     */
    public function getTracking(AccessToken $accessToken, string $region, $tracking_id, $carrier_id, $x_amzn_shipping_business_id = null)
    {
        $request = $this->getTrackingRequest($accessToken, $region, $tracking_id, $carrier_id, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'getTracking', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'getTracking')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getTracking'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getTracking',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'getTracking', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'getTracking')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getTracking'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getTracking',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\GetTrackingResponse',
            []
        );
    }

    /**
     * Create request for operation 'getTracking'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $tracking_id  A carrier-generated tracking identifier originally returned by the purchaseShipment operation. (required)
     * @param string $carrier_id  A carrier identifier originally returned by the getRates operation for the selected rate. (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function getTrackingRequest(AccessToken $accessToken, string $region, $tracking_id, $carrier_id, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'tracking_id' is set
        if ($tracking_id === null || (is_array($tracking_id) && count($tracking_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $tracking_id when calling getTracking'
            );
        }
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling getTracking'
            );
        }

        $resourcePath = '/shipping/v2/tracking';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';

        // query params
        if (is_array($tracking_id)) {
            $tracking_id = ObjectSerializer::serializeCollection($tracking_id, '', true);
        }
        if ($tracking_id !== null) {
            $queryParams['trackingId'] = ObjectSerializer::toString($tracking_id);
        }
        // query params
        if (is_array($carrier_id)) {
            $carrier_id = ObjectSerializer::serializeCollection($carrier_id, '', true);
        }
        if ($carrier_id !== null) {
            $queryParams['carrierId'] = ObjectSerializer::toString($carrier_id);
        }

        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }



        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'GET',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation getUnmanifestedShipments
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\GetUnmanifestedShipmentsRequest $body  body (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\GetUnmanifestedShipmentsResponse
     */
    public function getUnmanifestedShipments(AccessToken $accessToken, string $region, $body, $x_amzn_shipping_business_id = null)
    {
        $request = $this->getUnmanifestedShipmentsRequest($accessToken, $region, $body, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'getUnmanifestedShipments', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'getUnmanifestedShipments')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getUnmanifestedShipments'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getUnmanifestedShipments',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'getUnmanifestedShipments', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'getUnmanifestedShipments')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'getUnmanifestedShipments'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'getUnmanifestedShipments',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\GetUnmanifestedShipmentsResponse',
            []
        );
    }

    /**
     * Create request for operation 'getUnmanifestedShipments'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\GetUnmanifestedShipmentsRequest $body  (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function getUnmanifestedShipmentsRequest(AccessToken $accessToken, string $region, $body, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling getUnmanifestedShipments'
            );
        }

        $resourcePath = '/shipping/v2/unmanifestedShipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }



        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'PUT',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation linkCarrierAccount
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $carrier_id  The unique identifier associated with the carrier account. (required)
     * @param \AmazonPHP\SellingPartner\Model\Shipping\LinkCarrierAccountRequest $body  body (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\LinkCarrierAccountResponse
     */
    public function linkCarrierAccount(AccessToken $accessToken, string $region, $carrier_id, $body, $x_amzn_shipping_business_id = null)
    {
        $request = $this->linkCarrierAccountRequest($accessToken, $region, $carrier_id, $body, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'linkCarrierAccount', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'linkCarrierAccount')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'linkCarrierAccount'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'linkCarrierAccount',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'linkCarrierAccount', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'linkCarrierAccount')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'linkCarrierAccount'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'linkCarrierAccount',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\LinkCarrierAccountResponse',
            []
        );
    }

    /**
     * Create request for operation 'linkCarrierAccount'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $carrier_id  The unique identifier associated with the carrier account. (required)
     * @param \AmazonPHP\SellingPartner\Model\Shipping\LinkCarrierAccountRequest $body  (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function linkCarrierAccountRequest(AccessToken $accessToken, string $region, $carrier_id, $body, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling linkCarrierAccount'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling linkCarrierAccount'
            );
        }

        $resourcePath = '/shipping/v2/carrierAccounts/{carrierId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierId' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'PUT',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation oneClickShipment
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\OneClickShipmentRequest $body  body (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\OneClickShipmentResponse
     */
    public function oneClickShipment(AccessToken $accessToken, string $region, $body, $x_amzn_shipping_business_id = null)
    {
        $request = $this->oneClickShipmentRequest($accessToken, $region, $body, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'oneClickShipment', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'oneClickShipment')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'oneClickShipment'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'oneClickShipment',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'oneClickShipment', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'oneClickShipment')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'oneClickShipment'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'oneClickShipment',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\OneClickShipmentResponse',
            []
        );
    }

    /**
     * Create request for operation 'oneClickShipment'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\OneClickShipmentRequest $body  (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function oneClickShipmentRequest(AccessToken $accessToken, string $region, $body, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling oneClickShipment'
            );
        }

        $resourcePath = '/shipping/v2/oneClickShipment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }



        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'POST',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation purchaseShipment
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\PurchaseShipmentRequest $body  body (required)
     * @param string|null $x_amzn_idempotency_key  A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\PurchaseShipmentResponse
     */
    public function purchaseShipment(AccessToken $accessToken, string $region, $body, $x_amzn_idempotency_key = null, $x_amzn_shipping_business_id = null)
    {
        $request = $this->purchaseShipmentRequest($accessToken, $region, $body, $x_amzn_idempotency_key, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'purchaseShipment', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'purchaseShipment')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'purchaseShipment'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'purchaseShipment',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'purchaseShipment', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'purchaseShipment')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'purchaseShipment'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'purchaseShipment',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\PurchaseShipmentResponse',
            []
        );
    }

    /**
     * Create request for operation 'purchaseShipment'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param \AmazonPHP\SellingPartner\Model\Shipping\PurchaseShipmentRequest $body  (required)
     * @param string|null $x_amzn_idempotency_key  A unique value which the server uses to recognize subsequent retries of the same request. (optional)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function purchaseShipmentRequest(AccessToken $accessToken, string $region, $body, $x_amzn_idempotency_key = null, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling purchaseShipment'
            );
        }

        $resourcePath = '/shipping/v2/shipments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_idempotency_key !== null) {
            $headerParams['x-amzn-IdempotencyKey'] = ObjectSerializer::toHeaderValue($x_amzn_idempotency_key);
        }
        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }



        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'POST',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

    /**
     * Operation unlinkCarrierAccount
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $carrier_id  carrier Id to unlink with merchant. (required)
     * @param \AmazonPHP\SellingPartner\Model\Shipping\UnlinkCarrierAccountRequest $body  body (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return \AmazonPHP\SellingPartner\Model\Shipping\UnlinkCarrierAccountResponse
     */
    public function unlinkCarrierAccount(AccessToken $accessToken, string $region, $carrier_id, $body, $x_amzn_shipping_business_id = null)
    {
        $request = $this->unlinkCarrierAccountRequest($accessToken, $region, $carrier_id, $body, $x_amzn_shipping_business_id);

        $this->configuration->extensions()->preRequest('Shipping', 'unlinkCarrierAccount', $request);

        try {
            $correlationId = $this->configuration->idGenerator()->generate();
            $sanitizedRequest = $request;

            foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                $sanitizedRequest = $sanitizedRequest->withoutHeader($sensitiveHeader);
            }

            if ($this->configuration->loggingEnabled('Shipping', 'unlinkCarrierAccount')) {
                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'unlinkCarrierAccount'),
                    'Amazon Selling Partner API pre request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'unlinkCarrierAccount',
                        'request_correlation_id' => $correlationId,
                        'request_body' => (string) $sanitizedRequest->getBody(),
                        'request_headers' => $sanitizedRequest->getHeaders(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                    ]
                );
            }

            $response = $this->client->sendRequest($request);

            $this->configuration->extensions()->postRequest('Shipping', 'unlinkCarrierAccount', $request, $response);

            if ($this->configuration->loggingEnabled('Shipping', 'unlinkCarrierAccount')) {

                $sanitizedResponse = $response;

                foreach ($this->configuration->loggingSkipHeaders() as $sensitiveHeader) {
                    $sanitizedResponse = $sanitizedResponse->withoutHeader($sensitiveHeader);
                }

                $this->logger->log(
                    $this->configuration->logLevel('Shipping', 'unlinkCarrierAccount'),
                    'Amazon Selling Partner API post request',
                    [
                        'api' => 'Shipping',
                        'operation' => 'unlinkCarrierAccount',
                        'response_correlation_id' => $correlationId,
                        'response_body' => (string) $sanitizedResponse->getBody(),
                        'response_headers' => $sanitizedResponse->getHeaders(),
                        'response_status_code' => $sanitizedResponse->getStatusCode(),
                        'request_uri' => (string) $sanitizedRequest->getUri(),
                        'request_body' => (string) $sanitizedRequest->getBody()
                    ]
                );
            }
        } catch (ClientExceptionInterface $e) {
            throw new ApiException(
                "[{$e->getCode()}] {$e->getMessage()}",
                (int) $e->getCode(),
                null,
                null,
                $e
            );
        }

        $statusCode = $response->getStatusCode();

        if ($statusCode < 200 || $statusCode > 299) {
            throw new ApiException(
                sprintf(
                    '[%d] Error connecting to the API (%s)',
                    $statusCode,
                    (string) $request->getUri()
                ),
                $statusCode,
                $response->getHeaders(),
                (string) $response->getBody()
            );
        }

        return ObjectSerializer::deserialize(
            $this->configuration,
            (string) $response->getBody(),
            '\AmazonPHP\SellingPartner\Model\Shipping\UnlinkCarrierAccountResponse',
            []
        );
    }

    /**
     * Create request for operation 'unlinkCarrierAccount'
     *
     * @param AccessToken $accessToken
     * @param string $region
     * @param string $carrier_id  carrier Id to unlink with merchant. (required)
     * @param \AmazonPHP\SellingPartner\Model\Shipping\UnlinkCarrierAccountRequest $body  (required)
     * @param string|null $x_amzn_shipping_business_id  Amazon shipping business to assume for this request. The default is AmazonShipping_UK. (optional)
     *
     * @throws \AmazonPHP\SellingPartner\Exception\InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    public function unlinkCarrierAccountRequest(AccessToken $accessToken, string $region, $carrier_id, $body, $x_amzn_shipping_business_id = null) : RequestInterface
    {
        // verify the required parameter 'carrier_id' is set
        if ($carrier_id === null || (is_array($carrier_id) && count($carrier_id) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $carrier_id when calling unlinkCarrierAccount'
            );
        }
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new InvalidArgumentException(
                'Missing the required parameter $body when calling unlinkCarrierAccount'
            );
        }

        $resourcePath = '/shipping/v2/carrierAccounts/{carrierId}/unlink';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $multipart = false;
        $query = '';


        if (\count($queryParams)) {
            $query = http_build_query($queryParams);
        }

        // header params
        if ($x_amzn_shipping_business_id !== null) {
            $headerParams['x-amzn-shipping-business-id'] = ObjectSerializer::toHeaderValue($x_amzn_shipping_business_id);
        }

        // path params
        if ($carrier_id !== null) {
            $resourcePath = str_replace(
                '{' . 'carrierId' . '}',
                ObjectSerializer::toPathValue($carrier_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = [
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        } else {
            $headers = [
                'content-type' => ['application/json'],
                'accept' => ['application/json'],
                'host' => [$this->configuration->apiHost($region)],
                'user-agent' => [$this->configuration->userAgent()],
            ];
        }

        $request = $this->httpFactory->createRequest(
            'PUT',
            $this->configuration->apiURL($region) . $resourcePath . '?' . $query
        );

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['content-type'] === ['application/json']) {
                $httpBody = \json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }

            $request = $request->withBody($this->httpFactory->createStreamFromString($httpBody));
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                $request = $request->withParsedBody($multipartContents);
            } elseif ($headers['content-type'] === ['application/json']) {
                $request = $request->withBody($this->httpFactory->createStreamFromString(\json_encode($formParams)));
            } else {
                $request = $request->withParsedBody($formParams);
            }
        }

        foreach (\array_merge($headerParams, $headers) as $name => $header) {
            $request = $request->withHeader($name, $header);
        }

        return HttpSignatureHeaders::forConfig(
            $this->configuration,
            $accessToken,
            $region,
            $request
        );
    }

}
