<?php

namespace AmazonPHP\SellingPartner\Api\ServiceApi;

use AmazonPHP\SellingPartner\AccessToken;
use AmazonPHP\SellingPartner\Exception\ApiException;
use AmazonPHP\SellingPartner\Exception\InvalidArgumentException;
use Psr\Http\Message\RequestInterface;

/**
* Selling Partner API for Services
*
* With the Services API, you can build applications that help service providers get and modify their service orders and manage their resources.
*
* The version of the OpenAPI document: v1
*
* This class was auto-generated by https://openapi-generator.tech
* Do not change it, it will be overwritten with next execution of /bin/generate.sh
*/
interface ServicesSDKInterface
{
    public const API_NAME = 'Services';

    public const OPERATION_ADDAPPOINTMENTFORSERVICEJOBBYSERVICEJOBID = 'addAppointmentForServiceJobByServiceJobId';

    public const OPERATION_ADDAPPOINTMENTFORSERVICEJOBBYSERVICEJOBID_PATH = '/service/v1/serviceJobs/{serviceJobId}/appointments';
    public const OPERATION_ASSIGNAPPOINTMENTRESOURCES = 'assignAppointmentResources';

    public const OPERATION_ASSIGNAPPOINTMENTRESOURCES_PATH = '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources';
    public const OPERATION_CANCELRESERVATION = 'cancelReservation';

    public const OPERATION_CANCELRESERVATION_PATH = '/service/v1/reservation/{reservationId}';
    public const OPERATION_CANCELSERVICEJOBBYSERVICEJOBID = 'cancelServiceJobByServiceJobId';

    public const OPERATION_CANCELSERVICEJOBBYSERVICEJOBID_PATH = '/service/v1/serviceJobs/{serviceJobId}/cancellations';
    public const OPERATION_COMPLETESERVICEJOBBYSERVICEJOBID = 'completeServiceJobByServiceJobId';

    public const OPERATION_COMPLETESERVICEJOBBYSERVICEJOBID_PATH = '/service/v1/serviceJobs/{serviceJobId}/completions';
    public const OPERATION_CREATERESERVATION = 'createReservation';

    public const OPERATION_CREATERESERVATION_PATH = '/service/v1/reservation';
    public const OPERATION_CREATESERVICEDOCUMENTUPLOADDESTINATION = 'createServiceDocumentUploadDestination';

    public const OPERATION_CREATESERVICEDOCUMENTUPLOADDESTINATION_PATH = '/service/v1/documents';
    public const OPERATION_GETAPPOINTMENTSLOTS = 'getAppointmentSlots';

    public const OPERATION_GETAPPOINTMENTSLOTS_PATH = '/service/v1/appointmentSlots';
    public const OPERATION_GETAPPOINTMMENTSLOTSBYJOBID = 'getAppointmmentSlotsByJobId';

    public const OPERATION_GETAPPOINTMMENTSLOTSBYJOBID_PATH = '/service/v1/serviceJobs/{serviceJobId}/appointmentSlots';
    public const OPERATION_GETFIXEDSLOTCAPACITY = 'getFixedSlotCapacity';

    public const OPERATION_GETFIXEDSLOTCAPACITY_PATH = '/service/v1/serviceResources/{resourceId}/capacity/fixed';
    public const OPERATION_GETRANGESLOTCAPACITY = 'getRangeSlotCapacity';

    public const OPERATION_GETRANGESLOTCAPACITY_PATH = '/service/v1/serviceResources/{resourceId}/capacity/range';
    public const OPERATION_GETSERVICEJOBBYSERVICEJOBID = 'getServiceJobByServiceJobId';

    public const OPERATION_GETSERVICEJOBBYSERVICEJOBID_PATH = '/service/v1/serviceJobs/{serviceJobId}';
    public const OPERATION_GETSERVICEJOBS = 'getServiceJobs';

    public const OPERATION_GETSERVICEJOBS_PATH = '/service/v1/serviceJobs';
    public const OPERATION_RESCHEDULEAPPOINTMENTFORSERVICEJOBBYSERVICEJOBID = 'rescheduleAppointmentForServiceJobByServiceJobId';

    public const OPERATION_RESCHEDULEAPPOINTMENTFORSERVICEJOBBYSERVICEJOBID_PATH = '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}';
    public const OPERATION_SETAPPOINTMENTFULFILLMENTDATA = 'setAppointmentFulfillmentData';

    public const OPERATION_SETAPPOINTMENTFULFILLMENTDATA_PATH = '/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment';
    public const OPERATION_UPDATERESERVATION = 'updateReservation';

    public const OPERATION_UPDATERESERVATION_PATH = '/service/v1/reservation/{reservationId}';
    public const OPERATION_UPDATESCHEDULE = 'updateSchedule';

    public const OPERATION_UPDATESCHEDULE_PATH = '/service/v1/serviceResources/{resourceId}/schedules';

    /**
    * Operation addAppointmentForServiceJobByServiceJobId
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $service_job_id  An Amazon defined service job identifier. (required)
    * @param \AmazonPHP\SellingPartner\Model\Services\AddAppointmentRequest $body  Add appointment operation input details. (required)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\SetAppointmentResponse
    */
    public function addAppointmentForServiceJobByServiceJobId(AccessToken $accessToken, string $region, $service_job_id, $body);
    /**
    * Operation assignAppointmentResources
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $service_job_id  An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API. (required)
    * @param string $appointment_id  An Amazon-defined identifier of active service job appointment. (required)
    * @param \AmazonPHP\SellingPartner\Model\Services\AssignAppointmentResourcesRequest $body  body (required)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\AssignAppointmentResourcesResponse
    */
    public function assignAppointmentResources(AccessToken $accessToken, string $region, $service_job_id, $appointment_id, $body);
    /**
    * Operation cancelReservation
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $reservation_id  Reservation Identifier (required)
    * @param string[] $marketplace_ids  An identifier for the marketplace in which the resource operates. (required)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\CancelReservationResponse
    */
    public function cancelReservation(AccessToken $accessToken, string $region, $reservation_id, $marketplace_ids);
    /**
    * Operation cancelServiceJobByServiceJobId
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $service_job_id  An Amazon defined service job identifier. (required)
    * @param string $cancellation_reason_code  A cancel reason code that specifies the reason for cancelling a service job. (required)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\CancelServiceJobByServiceJobIdResponse
    */
    public function cancelServiceJobByServiceJobId(AccessToken $accessToken, string $region, $service_job_id, $cancellation_reason_code);
    /**
    * Operation completeServiceJobByServiceJobId
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $service_job_id  An Amazon defined service job identifier. (required)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\CompleteServiceJobByServiceJobIdResponse
    */
    public function completeServiceJobByServiceJobId(AccessToken $accessToken, string $region, $service_job_id);
    /**
    * Operation createReservation
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string[] $marketplace_ids  An identifier for the marketplace in which the resource operates. (required)
    * @param \AmazonPHP\SellingPartner\Model\Services\CreateReservationRequest $body  Reservation details (required)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\CreateReservationResponse
    */
    public function createReservation(AccessToken $accessToken, string $region, $marketplace_ids, $body);
    /**
    * Operation createServiceDocumentUploadDestination
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param \AmazonPHP\SellingPartner\Model\Services\ServiceUploadDocument $body  Upload document operation input details. (required)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\CreateServiceDocumentUploadDestination
    */
    public function createServiceDocumentUploadDestination(AccessToken $accessToken, string $region, $body);
    /**
    * Operation getAppointmentSlots
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $asin  ASIN associated with the service. (required)
    * @param string $store_id  Store identifier defining the region scope to retrive appointment slots. (required)
    * @param string[] $marketplace_ids  An identifier for the marketplace for which appointment slots are queried (required)
    * @param string|null $start_time  A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)
    * @param string|null $end_time  A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\GetAppointmentSlotsResponse
    */
    public function getAppointmentSlots(AccessToken $accessToken, string $region, $asin, $store_id, $marketplace_ids, $start_time = null, $end_time = null);
    /**
    * Operation getAppointmmentSlotsByJobId
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $service_job_id  A service job identifier to retrive appointment slots for associated service. (required)
    * @param string[] $marketplace_ids  An identifier for the marketplace in which the resource operates. (required)
    * @param string|null $start_time  A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;startTime&#x60; is provided, &#x60;endTime&#x60; should also be provided. Default value is as per business configuration. (optional)
    * @param string|null $end_time  A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If &#x60;endTime&#x60; is provided, &#x60;startTime&#x60; should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. (optional)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\GetAppointmentSlotsResponse
    */
    public function getAppointmmentSlotsByJobId(AccessToken $accessToken, string $region, $service_job_id, $marketplace_ids, $start_time = null, $end_time = null);
    /**
    * Operation getFixedSlotCapacity
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $resource_id  Resource Identifier. (required)
    * @param string[] $marketplace_ids  An identifier for the marketplace in which the resource operates. (required)
    * @param \AmazonPHP\SellingPartner\Model\Services\FixedSlotCapacityQuery $body  Request body. (required)
    * @param string|null $next_page_token  Next page token returned in the response of your previous request. (optional)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\FixedSlotCapacity
    */
    public function getFixedSlotCapacity(AccessToken $accessToken, string $region, $resource_id, $marketplace_ids, $body, $next_page_token = null);
    /**
    * Operation getRangeSlotCapacity
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $resource_id  Resource Identifier. (required)
    * @param string[] $marketplace_ids  An identifier for the marketplace in which the resource operates. (required)
    * @param \AmazonPHP\SellingPartner\Model\Services\RangeSlotCapacityQuery $body  Request body. (required)
    * @param string|null $next_page_token  Next page token returned in the response of your previous request. (optional)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\RangeSlotCapacity
    */
    public function getRangeSlotCapacity(AccessToken $accessToken, string $region, $resource_id, $marketplace_ids, $body, $next_page_token = null);
    /**
    * Operation getServiceJobByServiceJobId
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $service_job_id  A service job identifier. (required)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\GetServiceJobByServiceJobIdResponse
    */
    public function getServiceJobByServiceJobId(AccessToken $accessToken, string $region, $service_job_id);
    /**
    * Operation getServiceJobs
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string[] $marketplace_ids  Used to select jobs that were placed in the specified marketplaces. (required)
    * @param string[]|null $service_order_ids  List of service order ids for the query you want to perform.Max values supported 20. (optional)
    * @param string[]|null $service_job_status  A list of one or more job status by which to filter the list of jobs. (optional)
    * @param string|null $page_token  String returned in the response of your previous request. (optional)
    * @param int $page_size  A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. (optional, default to 20)
    * @param string|null $sort_field  Sort fields on which you want to sort the output. (optional)
    * @param string|null $sort_order  Sort order for the query you want to perform. (optional)
    * @param string|null $created_after  A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if &#x60;LastUpdatedAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
    * @param string|null $created_before  A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. (optional)
    * @param string|null $last_updated_after  A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if &#x60;createdAfter&#x60; is not specified. Specifying both &#x60;CreatedAfter&#x60; and &#x60;LastUpdatedAfter&#x60; returns an error. (optional)
    * @param string|null $last_updated_before  A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. (optional)
    * @param string|null $schedule_start_date  A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)
    * @param string|null $schedule_end_date  A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. (optional)
    * @param string[]|null $asins  List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. (optional)
    * @param string[]|null $required_skills  A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. (optional)
    * @param string[]|null $store_ids  List of Amazon-defined identifiers for the region scope. Max values supported is 50. (optional)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\GetServiceJobsResponse
    */
    public function getServiceJobs(AccessToken $accessToken, string $region, $marketplace_ids, $service_order_ids = null, $service_job_status = null, $page_token = null, $page_size = 20, $sort_field = null, $sort_order = null, $created_after = null, $created_before = null, $last_updated_after = null, $last_updated_before = null, $schedule_start_date = null, $schedule_end_date = null, $asins = null, $required_skills = null, $store_ids = null);
    /**
    * Operation rescheduleAppointmentForServiceJobByServiceJobId
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $service_job_id  An Amazon defined service job identifier. (required)
    * @param string $appointment_id  An existing appointment identifier for the Service Job. (required)
    * @param \AmazonPHP\SellingPartner\Model\Services\RescheduleAppointmentRequest $body  Reschedule appointment operation input details. (required)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\SetAppointmentResponse
    */
    public function rescheduleAppointmentForServiceJobByServiceJobId(AccessToken $accessToken, string $region, $service_job_id, $appointment_id, $body);
    /**
    * Operation setAppointmentFulfillmentData
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $service_job_id  An Amazon-defined service job identifier. Get this value by calling the &#x60;getServiceJobs&#x60; operation of the Services API. (required)
    * @param string $appointment_id  An Amazon-defined identifier of active service job appointment. (required)
    * @param \AmazonPHP\SellingPartner\Model\Services\SetAppointmentFulfillmentDataRequest $body  Appointment fulfillment data collection details. (required)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return string
    */
    public function setAppointmentFulfillmentData(AccessToken $accessToken, string $region, $service_job_id, $appointment_id, $body);
    /**
    * Operation updateReservation
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $reservation_id  Reservation Identifier (required)
    * @param string[] $marketplace_ids  An identifier for the marketplace in which the resource operates. (required)
    * @param \AmazonPHP\SellingPartner\Model\Services\UpdateReservationRequest $body  Reservation details (required)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\UpdateReservationResponse
    */
    public function updateReservation(AccessToken $accessToken, string $region, $reservation_id, $marketplace_ids, $body);
    /**
    * Operation updateSchedule
    *
    * @param AccessToken $accessToken
    * @param string $region
    * @param string $resource_id  Resource (store) Identifier (required)
    * @param string[] $marketplace_ids  An identifier for the marketplace in which the resource operates. (required)
    * @param \AmazonPHP\SellingPartner\Model\Services\UpdateScheduleRequest $body  Schedule details (required)
    *
    * @throws ApiException on non-2xx response
    * @throws InvalidArgumentException
    * @return \AmazonPHP\SellingPartner\Model\Services\UpdateScheduleResponse
    */
    public function updateSchedule(AccessToken $accessToken, string $region, $resource_id, $marketplace_ids, $body);
}
