<?php

declare(strict_types=1);


namespace AmazonPHP\SellingPartner\Model\Shipping;

use \ArrayAccess;
use \AmazonPHP\SellingPartner\ObjectSerializer;
use \AmazonPHP\SellingPartner\ModelInterface;
use \AmazonPHP\SellingPartner\Exception\AssertionException;

/**
* Amazon Shipping API
*
* The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
*
* The version of the OpenAPI document: v2
*
* This class was auto-generated by https://openapi-generator.tech
* Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class Item implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'item_value' => '\AmazonPHP\SellingPartner\Model\Shipping\Currency',
        'description' => 'string',
        'item_identifier' => 'string',
        'quantity' => 'int',
        'weight' => '\AmazonPHP\SellingPartner\Model\Shipping\Weight',
        'liquid_volume' => '\AmazonPHP\SellingPartner\Model\Shipping\LiquidVolume',
        'is_hazmat' => 'bool',
        'dangerous_goods_details' => '\AmazonPHP\SellingPartner\Model\Shipping\DangerousGoodsDetails',
        'product_type' => 'string',
        'invoice_details' => '\AmazonPHP\SellingPartner\Model\Shipping\InvoiceDetails',
        'serial_numbers' => 'string[]',
        'direct_fulfillment_item_identifiers' => '\AmazonPHP\SellingPartner\Model\Shipping\DirectFulfillmentItemIdentifiers'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'item_value' => null,
        'description' => null,
        'item_identifier' => null,
        'quantity' => null,
        'weight' => null,
        'liquid_volume' => null,
        'is_hazmat' => null,
        'dangerous_goods_details' => null,
        'product_type' => null,
        'invoice_details' => null,
        'serial_numbers' => null,
        'direct_fulfillment_item_identifiers' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'item_value' => 'itemValue',
        'description' => 'description',
        'item_identifier' => 'itemIdentifier',
        'quantity' => 'quantity',
        'weight' => 'weight',
        'liquid_volume' => 'liquidVolume',
        'is_hazmat' => 'isHazmat',
        'dangerous_goods_details' => 'dangerousGoodsDetails',
        'product_type' => 'productType',
        'invoice_details' => 'invoiceDetails',
        'serial_numbers' => 'serialNumbers',
        'direct_fulfillment_item_identifiers' => 'directFulfillmentItemIdentifiers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'item_value' => 'setItemValue',
        'description' => 'setDescription',
        'item_identifier' => 'setItemIdentifier',
        'quantity' => 'setQuantity',
        'weight' => 'setWeight',
        'liquid_volume' => 'setLiquidVolume',
        'is_hazmat' => 'setIsHazmat',
        'dangerous_goods_details' => 'setDangerousGoodsDetails',
        'product_type' => 'setProductType',
        'invoice_details' => 'setInvoiceDetails',
        'serial_numbers' => 'setSerialNumbers',
        'direct_fulfillment_item_identifiers' => 'setDirectFulfillmentItemIdentifiers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'item_value' => 'getItemValue',
        'description' => 'getDescription',
        'item_identifier' => 'getItemIdentifier',
        'quantity' => 'getQuantity',
        'weight' => 'getWeight',
        'liquid_volume' => 'getLiquidVolume',
        'is_hazmat' => 'getIsHazmat',
        'dangerous_goods_details' => 'getDangerousGoodsDetails',
        'product_type' => 'getProductType',
        'invoice_details' => 'getInvoiceDetails',
        'serial_numbers' => 'getSerialNumbers',
        'direct_fulfillment_item_identifiers' => 'getDirectFulfillmentItemIdentifiers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item_value'] = $data['item_value'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['item_identifier'] = $data['item_identifier'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
        $this->container['liquid_volume'] = $data['liquid_volume'] ?? null;
        $this->container['is_hazmat'] = $data['is_hazmat'] ?? null;
        $this->container['dangerous_goods_details'] = $data['dangerous_goods_details'] ?? null;
        $this->container['product_type'] = $data['product_type'] ?? null;
        $this->container['invoice_details'] = $data['invoice_details'] ?? null;
        $this->container['serial_numbers'] = $data['serial_numbers'] ?? null;
        $this->container['direct_fulfillment_item_identifiers'] = $data['direct_fulfillment_item_identifiers'] ?? null;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
            if ($this->container['item_value'] !== null) {
            $this->container['item_value']->validate();
            }

        if ($this->container['quantity'] === null) {
            throw new AssertionException("'quantity' can't be null");
        }

            if ($this->container['weight'] !== null) {
            $this->container['weight']->validate();
            }

            if ($this->container['liquid_volume'] !== null) {
            $this->container['liquid_volume']->validate();
            }

            if ($this->container['dangerous_goods_details'] !== null) {
            $this->container['dangerous_goods_details']->validate();
            }

            if ($this->container['invoice_details'] !== null) {
            $this->container['invoice_details']->validate();
            }

            if ($this->container['direct_fulfillment_item_identifiers'] !== null) {
            $this->container['direct_fulfillment_item_identifiers']->validate();
            }

    }


    /**
     * Gets item_value
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\Currency|null
     */
    public function getItemValue()
    {
        return $this->container['item_value'];
    }

    /**
     * Sets item_value
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\Currency|null $item_value item_value
     *
     * @return self
     */
    public function setItemValue($item_value) : self
    {
        $this->container['item_value'] = $item_value;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The product description of the item.
     *
     * @return self
     */
    public function setDescription($description) : self
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets item_identifier
     *
     * @return string|null
     */
    public function getItemIdentifier()
    {
        return $this->container['item_identifier'];
    }

    /**
     * Sets item_identifier
     *
     * @param string|null $item_identifier A unique identifier for an item provided by the client.
     *
     * @return self
     */
    public function setItemIdentifier($item_identifier) : self
    {
        $this->container['item_identifier'] = $item_identifier;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The number of units. This value is required.
     *
     * @return self
     */
    public function setQuantity($quantity) : self
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\Weight|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\Weight|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight) : self
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets liquid_volume
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\LiquidVolume|null
     */
    public function getLiquidVolume()
    {
        return $this->container['liquid_volume'];
    }

    /**
     * Sets liquid_volume
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\LiquidVolume|null $liquid_volume liquid_volume
     *
     * @return self
     */
    public function setLiquidVolume($liquid_volume) : self
    {
        $this->container['liquid_volume'] = $liquid_volume;

        return $this;
    }

    /**
     * Gets is_hazmat
     *
     * @return bool|null
     */
    public function getIsHazmat()
    {
        return $this->container['is_hazmat'];
    }

    /**
     * Sets is_hazmat
     *
     * @param bool|null $is_hazmat When true, the item qualifies as hazardous materials (hazmat). Defaults to false.
     *
     * @return self
     */
    public function setIsHazmat($is_hazmat) : self
    {
        $this->container['is_hazmat'] = $is_hazmat;

        return $this;
    }

    /**
     * Gets dangerous_goods_details
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\DangerousGoodsDetails|null
     */
    public function getDangerousGoodsDetails()
    {
        return $this->container['dangerous_goods_details'];
    }

    /**
     * Sets dangerous_goods_details
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\DangerousGoodsDetails|null $dangerous_goods_details dangerous_goods_details
     *
     * @return self
     */
    public function setDangerousGoodsDetails($dangerous_goods_details) : self
    {
        $this->container['dangerous_goods_details'] = $dangerous_goods_details;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string|null $product_type The product type of the item.
     *
     * @return self
     */
    public function setProductType($product_type) : self
    {
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets invoice_details
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\InvoiceDetails|null
     */
    public function getInvoiceDetails()
    {
        return $this->container['invoice_details'];
    }

    /**
     * Sets invoice_details
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\InvoiceDetails|null $invoice_details invoice_details
     *
     * @return self
     */
    public function setInvoiceDetails($invoice_details) : self
    {
        $this->container['invoice_details'] = $invoice_details;

        return $this;
    }

    /**
     * Gets serial_numbers
     *
     * @return string[]|null
     */
    public function getSerialNumbers()
    {
        return $this->container['serial_numbers'];
    }

    /**
     * Sets serial_numbers
     *
     * @param string[]|null $serial_numbers A list of unique serial numbers in an Amazon package that can be used to guarantee non-fraudulent items. The number of serial numbers in the list must be less than or equal to the quantity of items being shipped. Only applicable when channel source is Amazon.
     *
     * @return self
     */
    public function setSerialNumbers($serial_numbers) : self
    {
        $this->container['serial_numbers'] = $serial_numbers;

        return $this;
    }

    /**
     * Gets direct_fulfillment_item_identifiers
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\DirectFulfillmentItemIdentifiers|null
     */
    public function getDirectFulfillmentItemIdentifiers()
    {
        return $this->container['direct_fulfillment_item_identifiers'];
    }

    /**
     * Sets direct_fulfillment_item_identifiers
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\DirectFulfillmentItemIdentifiers|null $direct_fulfillment_item_identifiers direct_fulfillment_item_identifiers
     *
     * @return self
     */
    public function setDirectFulfillmentItemIdentifiers($direct_fulfillment_item_identifiers) : self
    {
        $this->container['direct_fulfillment_item_identifiers'] = $direct_fulfillment_item_identifiers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
       return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

