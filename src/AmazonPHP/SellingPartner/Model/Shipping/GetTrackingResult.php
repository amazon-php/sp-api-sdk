<?php

declare(strict_types=1);


namespace AmazonPHP\SellingPartner\Model\Shipping;

use \ArrayAccess;
use \AmazonPHP\SellingPartner\ObjectSerializer;
use \AmazonPHP\SellingPartner\ModelInterface;
use \AmazonPHP\SellingPartner\Exception\AssertionException;

/**
* Amazon Shipping API
*
* The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
*
* The version of the OpenAPI document: v2
*
* This class was auto-generated by https://openapi-generator.tech
* Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GetTrackingResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'GetTrackingResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'tracking_id' => 'string',
        'alternate_leg_tracking_id' => 'string',
        'event_history' => '\AmazonPHP\SellingPartner\Model\Shipping\Event[]',
        'promised_delivery_date' => '\DateTimeInterface',
        'summary' => '\AmazonPHP\SellingPartner\Model\Shipping\TrackingSummary'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'tracking_id' => null,
        'alternate_leg_tracking_id' => null,
        'event_history' => null,
        'promised_delivery_date' => 'date-time',
        'summary' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'tracking_id' => 'trackingId',
        'alternate_leg_tracking_id' => 'alternateLegTrackingId',
        'event_history' => 'eventHistory',
        'promised_delivery_date' => 'promisedDeliveryDate',
        'summary' => 'summary'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'tracking_id' => 'setTrackingId',
        'alternate_leg_tracking_id' => 'setAlternateLegTrackingId',
        'event_history' => 'setEventHistory',
        'promised_delivery_date' => 'setPromisedDeliveryDate',
        'summary' => 'setSummary'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'tracking_id' => 'getTrackingId',
        'alternate_leg_tracking_id' => 'getAlternateLegTrackingId',
        'event_history' => 'getEventHistory',
        'promised_delivery_date' => 'getPromisedDeliveryDate',
        'summary' => 'getSummary'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tracking_id'] = $data['tracking_id'] ?? null;
        $this->container['alternate_leg_tracking_id'] = $data['alternate_leg_tracking_id'] ?? null;
        $this->container['event_history'] = $data['event_history'] ?? null;
        $this->container['promised_delivery_date'] = $data['promised_delivery_date'] ?? null;
        $this->container['summary'] = $data['summary'] ?? null;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
        if ($this->container['tracking_id'] === null) {
            throw new AssertionException("'tracking_id' can't be null");
        }

        if ($this->container['alternate_leg_tracking_id'] === null) {
            throw new AssertionException("'alternate_leg_tracking_id' can't be null");
        }

        if ($this->container['event_history'] === null) {
            throw new AssertionException("'event_history' can't be null");
        }

        if ($this->container['promised_delivery_date'] === null) {
            throw new AssertionException("'promised_delivery_date' can't be null");
        }

        if ($this->container['summary'] === null) {
            throw new AssertionException("'summary' can't be null");
        }

            $this->container['summary']->validate();

    }


    /**
     * Gets tracking_id
     *
     * @return string
     */
    public function getTrackingId()
    {
        return $this->container['tracking_id'];
    }

    /**
     * Sets tracking_id
     *
     * @param string $tracking_id The carrier generated identifier for a package in a purchased shipment.
     *
     * @return self
     */
    public function setTrackingId($tracking_id) : self
    {
        $this->container['tracking_id'] = $tracking_id;

        return $this;
    }

    /**
     * Gets alternate_leg_tracking_id
     *
     * @return string
     */
    public function getAlternateLegTrackingId()
    {
        return $this->container['alternate_leg_tracking_id'];
    }

    /**
     * Sets alternate_leg_tracking_id
     *
     * @param string $alternate_leg_tracking_id The carrier generated reverse identifier for a returned package in a purchased shipment.
     *
     * @return self
     */
    public function setAlternateLegTrackingId($alternate_leg_tracking_id) : self
    {
        $this->container['alternate_leg_tracking_id'] = $alternate_leg_tracking_id;

        return $this;
    }

    /**
     * Gets event_history
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\Event[]
     */
    public function getEventHistory()
    {
        return $this->container['event_history'];
    }

    /**
     * Sets event_history
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\Event[] $event_history A list of tracking events.
     *
     * @return self
     */
    public function setEventHistory($event_history) : self
    {
        $this->container['event_history'] = $event_history;

        return $this;
    }

    /**
     * Gets promised_delivery_date
     *
     * @return \DateTimeInterface
     */
    public function getPromisedDeliveryDate()
    {
        return $this->container['promised_delivery_date'];
    }

    /**
     * Sets promised_delivery_date
     *
     * @param \DateTimeInterface $promised_delivery_date The date and time by which the shipment is promised to be delivered.
     *
     * @return self
     */
    public function setPromisedDeliveryDate($promised_delivery_date) : self
    {
        $this->container['promised_delivery_date'] = $promised_delivery_date;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\TrackingSummary
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\TrackingSummary $summary summary
     *
     * @return self
     */
    public function setSummary($summary) : self
    {
        $this->container['summary'] = $summary;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
       return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

