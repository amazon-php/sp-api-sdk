<?php

declare(strict_types=1);


namespace AmazonPHP\SellingPartner\Model\Shipping;

use \ArrayAccess;
use \AmazonPHP\SellingPartner\ObjectSerializer;
use \AmazonPHP\SellingPartner\ModelInterface;
use \AmazonPHP\SellingPartner\Exception\AssertionException;

/**
* Amazon Shipping API
*
* The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
*
* The version of the OpenAPI document: v2
*
* This class was auto-generated by https://openapi-generator.tech
* Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RateItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'RateItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'rate_item_id' => '\AmazonPHP\SellingPartner\Model\Shipping\RateItemID',
        'rate_item_type' => '\AmazonPHP\SellingPartner\Model\Shipping\RateItemType',
        'rate_item_charge' => '\AmazonPHP\SellingPartner\Model\Shipping\Currency',
        'rate_item_name_localization' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'rate_item_id' => null,
        'rate_item_type' => null,
        'rate_item_charge' => null,
        'rate_item_name_localization' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'rate_item_id' => 'rateItemID',
        'rate_item_type' => 'rateItemType',
        'rate_item_charge' => 'rateItemCharge',
        'rate_item_name_localization' => 'rateItemNameLocalization'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'rate_item_id' => 'setRateItemId',
        'rate_item_type' => 'setRateItemType',
        'rate_item_charge' => 'setRateItemCharge',
        'rate_item_name_localization' => 'setRateItemNameLocalization'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'rate_item_id' => 'getRateItemId',
        'rate_item_type' => 'getRateItemType',
        'rate_item_charge' => 'getRateItemCharge',
        'rate_item_name_localization' => 'getRateItemNameLocalization'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['rate_item_id'] = $data['rate_item_id'] ?? null;
        $this->container['rate_item_type'] = $data['rate_item_type'] ?? null;
        $this->container['rate_item_charge'] = $data['rate_item_charge'] ?? null;
        $this->container['rate_item_name_localization'] = $data['rate_item_name_localization'] ?? null;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
            if ($this->container['rate_item_charge'] !== null) {
            $this->container['rate_item_charge']->validate();
            }

    }


    /**
     * Gets rate_item_id
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\RateItemID|null
     */
    public function getRateItemId()
    {
        return $this->container['rate_item_id'];
    }

    /**
     * Sets rate_item_id
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\RateItemID|null $rate_item_id rate_item_id
     *
     * @return self
     */
    public function setRateItemId($rate_item_id) : self
    {
        $this->container['rate_item_id'] = $rate_item_id;

        return $this;
    }

    /**
     * Gets rate_item_type
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\RateItemType|null
     */
    public function getRateItemType()
    {
        return $this->container['rate_item_type'];
    }

    /**
     * Sets rate_item_type
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\RateItemType|null $rate_item_type rate_item_type
     *
     * @return self
     */
    public function setRateItemType($rate_item_type) : self
    {
        $this->container['rate_item_type'] = $rate_item_type;

        return $this;
    }

    /**
     * Gets rate_item_charge
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\Currency|null
     */
    public function getRateItemCharge()
    {
        return $this->container['rate_item_charge'];
    }

    /**
     * Sets rate_item_charge
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\Currency|null $rate_item_charge rate_item_charge
     *
     * @return self
     */
    public function setRateItemCharge($rate_item_charge) : self
    {
        $this->container['rate_item_charge'] = $rate_item_charge;

        return $this;
    }

    /**
     * Gets rate_item_name_localization
     *
     * @return string|null
     */
    public function getRateItemNameLocalization()
    {
        return $this->container['rate_item_name_localization'];
    }

    /**
     * Sets rate_item_name_localization
     *
     * @param string|null $rate_item_name_localization Used for the localization.
     *
     * @return self
     */
    public function setRateItemNameLocalization($rate_item_name_localization) : self
    {
        $this->container['rate_item_name_localization'] = $rate_item_name_localization;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
       return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

