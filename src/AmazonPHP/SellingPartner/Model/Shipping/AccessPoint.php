<?php

declare(strict_types=1);


namespace AmazonPHP\SellingPartner\Model\Shipping;

use \ArrayAccess;
use \AmazonPHP\SellingPartner\ObjectSerializer;
use \AmazonPHP\SellingPartner\ModelInterface;
use \AmazonPHP\SellingPartner\Exception\AssertionException;

/**
* Amazon Shipping API
*
* The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
*
* The version of the OpenAPI document: v2
*
* This class was auto-generated by https://openapi-generator.tech
* Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AccessPoint implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'AccessPoint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'access_point_id' => 'string',
        'name' => 'string',
        'timezone' => 'string',
        'type' => '\AmazonPHP\SellingPartner\Model\Shipping\AccessPointType',
        'accessibility_attributes' => '\AmazonPHP\SellingPartner\Model\Shipping\AccessibilityAttributes',
        'address' => '\AmazonPHP\SellingPartner\Model\Shipping\Address',
        'exception_operating_hours' => '\AmazonPHP\SellingPartner\Model\Shipping\ExceptionOperatingHours[]',
        'assistance_type' => 'string',
        'score' => 'string',
        'standard_operating_hours' => 'array<string,\AmazonPHP\SellingPartner\Model\Shipping\OperatingHours>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'access_point_id' => null,
        'name' => null,
        'timezone' => null,
        'type' => null,
        'accessibility_attributes' => null,
        'address' => null,
        'exception_operating_hours' => null,
        'assistance_type' => null,
        'score' => null,
        'standard_operating_hours' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'access_point_id' => 'accessPointId',
        'name' => 'name',
        'timezone' => 'timezone',
        'type' => 'type',
        'accessibility_attributes' => 'accessibilityAttributes',
        'address' => 'address',
        'exception_operating_hours' => 'exceptionOperatingHours',
        'assistance_type' => 'assistanceType',
        'score' => 'score',
        'standard_operating_hours' => 'standardOperatingHours'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'access_point_id' => 'setAccessPointId',
        'name' => 'setName',
        'timezone' => 'setTimezone',
        'type' => 'setType',
        'accessibility_attributes' => 'setAccessibilityAttributes',
        'address' => 'setAddress',
        'exception_operating_hours' => 'setExceptionOperatingHours',
        'assistance_type' => 'setAssistanceType',
        'score' => 'setScore',
        'standard_operating_hours' => 'setStandardOperatingHours'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'access_point_id' => 'getAccessPointId',
        'name' => 'getName',
        'timezone' => 'getTimezone',
        'type' => 'getType',
        'accessibility_attributes' => 'getAccessibilityAttributes',
        'address' => 'getAddress',
        'exception_operating_hours' => 'getExceptionOperatingHours',
        'assistance_type' => 'getAssistanceType',
        'score' => 'getScore',
        'standard_operating_hours' => 'getStandardOperatingHours'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    const ASSISTANCE_TYPE_STAFF_ASSISTED = 'STAFF_ASSISTED';
    const ASSISTANCE_TYPE_SELF_ASSISTED = 'SELF_ASSISTED';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAssistanceTypeAllowableValues() : array
    {
        return [
            self::ASSISTANCE_TYPE_STAFF_ASSISTED,
            self::ASSISTANCE_TYPE_SELF_ASSISTED,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['access_point_id'] = $data['access_point_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['timezone'] = $data['timezone'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['accessibility_attributes'] = $data['accessibility_attributes'] ?? null;
        $this->container['address'] = $data['address'] ?? null;
        $this->container['exception_operating_hours'] = $data['exception_operating_hours'] ?? null;
        $this->container['assistance_type'] = $data['assistance_type'] ?? null;
        $this->container['score'] = $data['score'] ?? null;
        $this->container['standard_operating_hours'] = $data['standard_operating_hours'] ?? null;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
            if ($this->container['accessibility_attributes'] !== null) {
            $this->container['accessibility_attributes']->validate();
            }

            if ($this->container['address'] !== null) {
            $this->container['address']->validate();
            }

        $allowedValues = $this->getAssistanceTypeAllowableValues();
        if (!is_null($this->container['assistance_type']) && !in_array($this->container['assistance_type'], $allowedValues, true)) {
            throw new AssertionException(
                \sprintf(
                    "invalid value '%s' for 'assistance_type', must be one of '%s'",
                    $this->container['assistance_type'],
                    implode("', '", $allowedValues)
                )
            );
        }

    }


    /**
     * Gets access_point_id
     *
     * @return string|null
     */
    public function getAccessPointId()
    {
        return $this->container['access_point_id'];
    }

    /**
     * Sets access_point_id
     *
     * @param string|null $access_point_id Unique identifier for the access point
     *
     * @return self
     */
    public function setAccessPointId($access_point_id) : self
    {
        $this->container['access_point_id'] = $access_point_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of entity (store/hub etc) where this access point is located
     *
     * @return self
     */
    public function setName($name) : self
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string|null
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string|null $timezone Timezone of access point
     *
     * @return self
     */
    public function setTimezone($timezone) : self
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\AccessPointType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\AccessPointType|null $type type
     *
     * @return self
     */
    public function setType($type) : self
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets accessibility_attributes
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\AccessibilityAttributes|null
     */
    public function getAccessibilityAttributes()
    {
        return $this->container['accessibility_attributes'];
    }

    /**
     * Sets accessibility_attributes
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\AccessibilityAttributes|null $accessibility_attributes accessibility_attributes
     *
     * @return self
     */
    public function setAccessibilityAttributes($accessibility_attributes) : self
    {
        $this->container['accessibility_attributes'] = $accessibility_attributes;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\Address|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\Address|null $address address
     *
     * @return self
     */
    public function setAddress($address) : self
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets exception_operating_hours
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\ExceptionOperatingHours[]|null
     */
    public function getExceptionOperatingHours()
    {
        return $this->container['exception_operating_hours'];
    }

    /**
     * Sets exception_operating_hours
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\ExceptionOperatingHours[]|null $exception_operating_hours exception_operating_hours
     *
     * @return self
     */
    public function setExceptionOperatingHours($exception_operating_hours) : self
    {
        $this->container['exception_operating_hours'] = $exception_operating_hours;

        return $this;
    }

    /**
     * Gets assistance_type
     *
     * @return string|null
     */
    public function getAssistanceType()
    {
        return $this->container['assistance_type'];
    }

    /**
     * Sets assistance_type
     *
     * @param string|null $assistance_type assistance_type
     *
     * @return self
     */
    public function setAssistanceType($assistance_type) : self
    {
        $this->container['assistance_type'] = $assistance_type;

        return $this;
    }

    /**
     * Gets score
     *
     * @return string|null
     */
    public function getScore()
    {
        return $this->container['score'];
    }

    /**
     * Sets score
     *
     * @param string|null $score The score of access point, based on proximity to postal code and sorting preference. This can be used to sort access point results on shipper's end.
     *
     * @return self
     */
    public function setScore($score) : self
    {
        $this->container['score'] = $score;

        return $this;
    }

    /**
     * Gets standard_operating_hours
     *
     * @return array<string,\AmazonPHP\SellingPartner\Model\Shipping\OperatingHours>|null
     */
    public function getStandardOperatingHours()
    {
        return $this->container['standard_operating_hours'];
    }

    /**
     * Sets standard_operating_hours
     *
     * @param array<string,\AmazonPHP\SellingPartner\Model\Shipping\OperatingHours>|null $standard_operating_hours Map of day of the week to operating hours of that day
     *
     * @return self
     */
    public function setStandardOperatingHours($standard_operating_hours) : self
    {
        $this->container['standard_operating_hours'] = $standard_operating_hours;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
       return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

