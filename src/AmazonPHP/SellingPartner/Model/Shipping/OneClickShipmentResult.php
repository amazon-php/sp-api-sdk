<?php

declare(strict_types=1);


namespace AmazonPHP\SellingPartner\Model\Shipping;

use \ArrayAccess;
use \AmazonPHP\SellingPartner\ObjectSerializer;
use \AmazonPHP\SellingPartner\ModelInterface;
use \AmazonPHP\SellingPartner\Exception\AssertionException;

/**
* Amazon Shipping API
*
* The Amazon Shipping API is designed to support outbound shipping use cases both for orders originating on Amazon-owned marketplaces as well as external channels/marketplaces. With these APIs, you can request shipping rates, create shipments, cancel shipments, and track shipments.
*
* The version of the OpenAPI document: v2
*
* This class was auto-generated by https://openapi-generator.tech
* Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OneClickShipmentResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'OneClickShipmentResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'shipment_id' => 'string',
        'package_document_details' => '\AmazonPHP\SellingPartner\Model\Shipping\PackageDocumentDetail[]',
        'promise' => '\AmazonPHP\SellingPartner\Model\Shipping\Promise',
        'carrier' => '\AmazonPHP\SellingPartner\Model\Shipping\Carrier',
        'service' => '\AmazonPHP\SellingPartner\Model\Shipping\Service',
        'total_charge' => '\AmazonPHP\SellingPartner\Model\Shipping\Currency'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'shipment_id' => null,
        'package_document_details' => null,
        'promise' => null,
        'carrier' => null,
        'service' => null,
        'total_charge' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'shipment_id' => 'shipmentId',
        'package_document_details' => 'packageDocumentDetails',
        'promise' => 'promise',
        'carrier' => 'carrier',
        'service' => 'service',
        'total_charge' => 'totalCharge'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'shipment_id' => 'setShipmentId',
        'package_document_details' => 'setPackageDocumentDetails',
        'promise' => 'setPromise',
        'carrier' => 'setCarrier',
        'service' => 'setService',
        'total_charge' => 'setTotalCharge'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'shipment_id' => 'getShipmentId',
        'package_document_details' => 'getPackageDocumentDetails',
        'promise' => 'getPromise',
        'carrier' => 'getCarrier',
        'service' => 'getService',
        'total_charge' => 'getTotalCharge'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipment_id'] = $data['shipment_id'] ?? null;
        $this->container['package_document_details'] = $data['package_document_details'] ?? null;
        $this->container['promise'] = $data['promise'] ?? null;
        $this->container['carrier'] = $data['carrier'] ?? null;
        $this->container['service'] = $data['service'] ?? null;
        $this->container['total_charge'] = $data['total_charge'] ?? null;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
        if ($this->container['shipment_id'] === null) {
            throw new AssertionException("'shipment_id' can't be null");
        }

        if ($this->container['package_document_details'] === null) {
            throw new AssertionException("'package_document_details' can't be null");
        }

        if ($this->container['promise'] === null) {
            throw new AssertionException("'promise' can't be null");
        }

            $this->container['promise']->validate();

        if ($this->container['carrier'] === null) {
            throw new AssertionException("'carrier' can't be null");
        }

            $this->container['carrier']->validate();

        if ($this->container['service'] === null) {
            throw new AssertionException("'service' can't be null");
        }

            $this->container['service']->validate();

        if ($this->container['total_charge'] === null) {
            throw new AssertionException("'total_charge' can't be null");
        }

            $this->container['total_charge']->validate();

    }


    /**
     * Gets shipment_id
     *
     * @return string
     */
    public function getShipmentId()
    {
        return $this->container['shipment_id'];
    }

    /**
     * Sets shipment_id
     *
     * @param string $shipment_id The unique shipment identifier provided by a shipping service.
     *
     * @return self
     */
    public function setShipmentId($shipment_id) : self
    {
        $this->container['shipment_id'] = $shipment_id;

        return $this;
    }

    /**
     * Gets package_document_details
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\PackageDocumentDetail[]
     */
    public function getPackageDocumentDetails()
    {
        return $this->container['package_document_details'];
    }

    /**
     * Sets package_document_details
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\PackageDocumentDetail[] $package_document_details A list of post-purchase details about a package that will be shipped using a shipping service.
     *
     * @return self
     */
    public function setPackageDocumentDetails($package_document_details) : self
    {
        $this->container['package_document_details'] = $package_document_details;

        return $this;
    }

    /**
     * Gets promise
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\Promise
     */
    public function getPromise()
    {
        return $this->container['promise'];
    }

    /**
     * Sets promise
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\Promise $promise promise
     *
     * @return self
     */
    public function setPromise($promise) : self
    {
        $this->container['promise'] = $promise;

        return $this;
    }

    /**
     * Gets carrier
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\Carrier
     */
    public function getCarrier()
    {
        return $this->container['carrier'];
    }

    /**
     * Sets carrier
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\Carrier $carrier carrier
     *
     * @return self
     */
    public function setCarrier($carrier) : self
    {
        $this->container['carrier'] = $carrier;

        return $this;
    }

    /**
     * Gets service
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\Service
     */
    public function getService()
    {
        return $this->container['service'];
    }

    /**
     * Sets service
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\Service $service service
     *
     * @return self
     */
    public function setService($service) : self
    {
        $this->container['service'] = $service;

        return $this;
    }

    /**
     * Gets total_charge
     *
     * @return \AmazonPHP\SellingPartner\Model\Shipping\Currency
     */
    public function getTotalCharge()
    {
        return $this->container['total_charge'];
    }

    /**
     * Sets total_charge
     *
     * @param \AmazonPHP\SellingPartner\Model\Shipping\Currency $total_charge total_charge
     *
     * @return self
     */
    public function setTotalCharge($total_charge) : self
    {
        $this->container['total_charge'] = $total_charge;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
       return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

