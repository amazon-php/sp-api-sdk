<?php declare(strict_types=1);
/**
 * RelationshipType.
 *
 * PHP version 7.4
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @link     https://openapi-generator.tech
 */

/**
 * Selling Partner API for Catalog Items.
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * The version of the OpenAPI document: v0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace AmazonPHP\SellingPartner\Model\CatalogItemDeprecated;

use AmazonPHP\SellingPartner\ModelInterface;
use AmazonPHP\SellingPartner\ObjectSerializer;

/**
 * This class was auto-generated by https://github.com/OpenAPITools/openapi-generator/.
 * Do not change it, it will be overwritten with next execution of /bin/generate.sh.
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 * @deprecated
 */
class RelationshipType implements \ArrayAccess, \JsonSerializable, ModelInterface
{
    public const DISCRIMINATOR = null;

    /**
     * The original name of the model.
     *
     * @var string
     */
    protected static string $openAPIModelName = 'RelationshipType';

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @var string[]
     */
    protected static array $openAPITypes = [
        'identifiers' => '\AmazonPHP\SellingPartner\Model\CatalogItemDeprecated\IdentifierType',
        'color' => 'string',
        'edition' => 'string',
        'flavor' => 'string',
        'gem_type' => 'string[]',
        'golf_club_flex' => 'string',
        'hand_orientation' => 'string',
        'hardware_platform' => 'string',
        'material_type' => 'string[]',
        'metal_type' => 'string',
        'model' => 'string',
        'operating_system' => 'string[]',
        'product_type_subcategory' => 'string',
        'ring_size' => 'string',
        'shaft_material' => 'string',
        'scent' => 'string',
        'size' => 'string',
        'size_per_pearl' => 'string',
        'golf_club_loft' => '\AmazonPHP\SellingPartner\Model\CatalogItemDeprecated\DecimalWithUnits',
        'total_diamond_weight' => '\AmazonPHP\SellingPartner\Model\CatalogItemDeprecated\DecimalWithUnits',
        'total_gem_weight' => '\AmazonPHP\SellingPartner\Model\CatalogItemDeprecated\DecimalWithUnits',
        'package_quantity' => 'int',
        'item_dimensions' => '\AmazonPHP\SellingPartner\Model\CatalogItemDeprecated\DimensionType',
    ];

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @var string[]
     * @phpstan-var array<string, string|null>
     * @psalm-var array<string, string|null>
     */
    protected static array $openAPIFormats = [
        'identifiers' => null,
        'color' => null,
        'edition' => null,
        'flavor' => null,
        'gem_type' => null,
        'golf_club_flex' => null,
        'hand_orientation' => null,
        'hardware_platform' => null,
        'material_type' => null,
        'metal_type' => null,
        'model' => null,
        'operating_system' => null,
        'product_type_subcategory' => null,
        'ring_size' => null,
        'shaft_material' => null,
        'scent' => null,
        'size' => null,
        'size_per_pearl' => null,
        'golf_club_loft' => null,
        'total_diamond_weight' => null,
        'total_gem_weight' => null,
        'package_quantity' => null,
        'item_dimensions' => null,
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'identifiers' => 'Identifiers',
        'color' => 'Color',
        'edition' => 'Edition',
        'flavor' => 'Flavor',
        'gem_type' => 'GemType',
        'golf_club_flex' => 'GolfClubFlex',
        'hand_orientation' => 'HandOrientation',
        'hardware_platform' => 'HardwarePlatform',
        'material_type' => 'MaterialType',
        'metal_type' => 'MetalType',
        'model' => 'Model',
        'operating_system' => 'OperatingSystem',
        'product_type_subcategory' => 'ProductTypeSubcategory',
        'ring_size' => 'RingSize',
        'shaft_material' => 'ShaftMaterial',
        'scent' => 'Scent',
        'size' => 'Size',
        'size_per_pearl' => 'SizePerPearl',
        'golf_club_loft' => 'GolfClubLoft',
        'total_diamond_weight' => 'TotalDiamondWeight',
        'total_gem_weight' => 'TotalGemWeight',
        'package_quantity' => 'PackageQuantity',
        'item_dimensions' => 'ItemDimensions',
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @var string[]
     */
    protected static array $setters = [
        'identifiers' => 'setIdentifiers',
        'color' => 'setColor',
        'edition' => 'setEdition',
        'flavor' => 'setFlavor',
        'gem_type' => 'setGemType',
        'golf_club_flex' => 'setGolfClubFlex',
        'hand_orientation' => 'setHandOrientation',
        'hardware_platform' => 'setHardwarePlatform',
        'material_type' => 'setMaterialType',
        'metal_type' => 'setMetalType',
        'model' => 'setModel',
        'operating_system' => 'setOperatingSystem',
        'product_type_subcategory' => 'setProductTypeSubcategory',
        'ring_size' => 'setRingSize',
        'shaft_material' => 'setShaftMaterial',
        'scent' => 'setScent',
        'size' => 'setSize',
        'size_per_pearl' => 'setSizePerPearl',
        'golf_club_loft' => 'setGolfClubLoft',
        'total_diamond_weight' => 'setTotalDiamondWeight',
        'total_gem_weight' => 'setTotalGemWeight',
        'package_quantity' => 'setPackageQuantity',
        'item_dimensions' => 'setItemDimensions',
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @var string[]
     */
    protected static array $getters = [
        'identifiers' => 'getIdentifiers',
        'color' => 'getColor',
        'edition' => 'getEdition',
        'flavor' => 'getFlavor',
        'gem_type' => 'getGemType',
        'golf_club_flex' => 'getGolfClubFlex',
        'hand_orientation' => 'getHandOrientation',
        'hardware_platform' => 'getHardwarePlatform',
        'material_type' => 'getMaterialType',
        'metal_type' => 'getMetalType',
        'model' => 'getModel',
        'operating_system' => 'getOperatingSystem',
        'product_type_subcategory' => 'getProductTypeSubcategory',
        'ring_size' => 'getRingSize',
        'shaft_material' => 'getShaftMaterial',
        'scent' => 'getScent',
        'size' => 'getSize',
        'size_per_pearl' => 'getSizePerPearl',
        'golf_club_loft' => 'getGolfClubLoft',
        'total_diamond_weight' => 'getTotalDiamondWeight',
        'total_gem_weight' => 'getTotalGemWeight',
        'package_quantity' => 'getPackageQuantity',
        'item_dimensions' => 'getItemDimensions',
    ];

    /**
     * Associative array for storing property values.
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor.
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['identifiers'] = $data['identifiers'] ?? null;
        $this->container['color'] = $data['color'] ?? null;
        $this->container['edition'] = $data['edition'] ?? null;
        $this->container['flavor'] = $data['flavor'] ?? null;
        $this->container['gem_type'] = $data['gem_type'] ?? null;
        $this->container['golf_club_flex'] = $data['golf_club_flex'] ?? null;
        $this->container['hand_orientation'] = $data['hand_orientation'] ?? null;
        $this->container['hardware_platform'] = $data['hardware_platform'] ?? null;
        $this->container['material_type'] = $data['material_type'] ?? null;
        $this->container['metal_type'] = $data['metal_type'] ?? null;
        $this->container['model'] = $data['model'] ?? null;
        $this->container['operating_system'] = $data['operating_system'] ?? null;
        $this->container['product_type_subcategory'] = $data['product_type_subcategory'] ?? null;
        $this->container['ring_size'] = $data['ring_size'] ?? null;
        $this->container['shaft_material'] = $data['shaft_material'] ?? null;
        $this->container['scent'] = $data['scent'] ?? null;
        $this->container['size'] = $data['size'] ?? null;
        $this->container['size_per_pearl'] = $data['size_per_pearl'] ?? null;
        $this->container['golf_club_loft'] = $data['golf_club_loft'] ?? null;
        $this->container['total_diamond_weight'] = $data['total_diamond_weight'] ?? null;
        $this->container['total_gem_weight'] = $data['total_gem_weight'] ?? null;
        $this->container['package_quantity'] = $data['package_quantity'] ?? null;
        $this->container['item_dimensions'] = $data['item_dimensions'] ?? null;
    }

    /**
     * Array of property to type mappings. Used for (de)serialization.
     *
     * @return string[]
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization.
     *
     * @return null[]|string[]
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name.
     *
     * @return string[]
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses).
     *
     * @return string[]
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests).
     *
     * @return string[]
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * Gets the string presentation of the object.
     */
    public function __toString() : string
    {
        return \json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * The original name of the model.
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties() : array
    {
        return [];
    }

    /**
     * Validate all the properties in the model
     * return true if all passed.
     *
     * @return bool True if all properties are valid
     */
    public function valid() : bool
    {
        return \count($this->listInvalidProperties()) === 0;
    }

    /**
     * Gets identifiers.
     */
    public function getIdentifiers() : ?IdentifierType
    {
        return $this->container['identifiers'];
    }

    /**
     * Sets identifiers.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\CatalogItemDeprecated\IdentifierType $identifiers identifiers
     */
    public function setIdentifiers(?IdentifierType $identifiers) : self
    {
        $this->container['identifiers'] = $identifiers;

        return $this;
    }

    /**
     * Gets color.
     */
    public function getColor() : ?string
    {
        return $this->container['color'];
    }

    /**
     * Sets color.
     *
     * @param null|string $color the color variation of the item
     */
    public function setColor(?string $color) : self
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets edition.
     */
    public function getEdition() : ?string
    {
        return $this->container['edition'];
    }

    /**
     * Sets edition.
     *
     * @param null|string $edition the edition variation of the item
     */
    public function setEdition(?string $edition) : self
    {
        $this->container['edition'] = $edition;

        return $this;
    }

    /**
     * Gets flavor.
     */
    public function getFlavor() : ?string
    {
        return $this->container['flavor'];
    }

    /**
     * Sets flavor.
     *
     * @param null|string $flavor the flavor variation of the item
     */
    public function setFlavor(?string $flavor) : self
    {
        $this->container['flavor'] = $flavor;

        return $this;
    }

    /**
     * Gets gem_type.
     *
     * @return null|string[]
     */
    public function getGemType() : ?array
    {
        return $this->container['gem_type'];
    }

    /**
     * Sets gem_type.
     *
     * @param null|string[] $gem_type the gem type variations of the item
     */
    public function setGemType(?array $gem_type) : self
    {
        $this->container['gem_type'] = $gem_type;

        return $this;
    }

    /**
     * Gets golf_club_flex.
     */
    public function getGolfClubFlex() : ?string
    {
        return $this->container['golf_club_flex'];
    }

    /**
     * Sets golf_club_flex.
     *
     * @param null|string $golf_club_flex the golf club flex variation of an item
     */
    public function setGolfClubFlex(?string $golf_club_flex) : self
    {
        $this->container['golf_club_flex'] = $golf_club_flex;

        return $this;
    }

    /**
     * Gets hand_orientation.
     */
    public function getHandOrientation() : ?string
    {
        return $this->container['hand_orientation'];
    }

    /**
     * Sets hand_orientation.
     *
     * @param null|string $hand_orientation the hand orientation variation of an item
     */
    public function setHandOrientation(?string $hand_orientation) : self
    {
        $this->container['hand_orientation'] = $hand_orientation;

        return $this;
    }

    /**
     * Gets hardware_platform.
     */
    public function getHardwarePlatform() : ?string
    {
        return $this->container['hardware_platform'];
    }

    /**
     * Sets hardware_platform.
     *
     * @param null|string $hardware_platform the hardware platform variation of an item
     */
    public function setHardwarePlatform(?string $hardware_platform) : self
    {
        $this->container['hardware_platform'] = $hardware_platform;

        return $this;
    }

    /**
     * Gets material_type.
     *
     * @return null|string[]
     */
    public function getMaterialType() : ?array
    {
        return $this->container['material_type'];
    }

    /**
     * Sets material_type.
     *
     * @param null|string[] $material_type the material type variations of an item
     */
    public function setMaterialType(?array $material_type) : self
    {
        $this->container['material_type'] = $material_type;

        return $this;
    }

    /**
     * Gets metal_type.
     */
    public function getMetalType() : ?string
    {
        return $this->container['metal_type'];
    }

    /**
     * Sets metal_type.
     *
     * @param null|string $metal_type the metal type variation of an item
     */
    public function setMetalType(?string $metal_type) : self
    {
        $this->container['metal_type'] = $metal_type;

        return $this;
    }

    /**
     * Gets model.
     */
    public function getModel() : ?string
    {
        return $this->container['model'];
    }

    /**
     * Sets model.
     *
     * @param null|string $model the model variation of an item
     */
    public function setModel(?string $model) : self
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets operating_system.
     *
     * @return null|string[]
     */
    public function getOperatingSystem() : ?array
    {
        return $this->container['operating_system'];
    }

    /**
     * Sets operating_system.
     *
     * @param null|string[] $operating_system the operating system variations of an item
     */
    public function setOperatingSystem(?array $operating_system) : self
    {
        $this->container['operating_system'] = $operating_system;

        return $this;
    }

    /**
     * Gets product_type_subcategory.
     */
    public function getProductTypeSubcategory() : ?string
    {
        return $this->container['product_type_subcategory'];
    }

    /**
     * Sets product_type_subcategory.
     *
     * @param null|string $product_type_subcategory the product type subcategory variation of an item
     */
    public function setProductTypeSubcategory(?string $product_type_subcategory) : self
    {
        $this->container['product_type_subcategory'] = $product_type_subcategory;

        return $this;
    }

    /**
     * Gets ring_size.
     */
    public function getRingSize() : ?string
    {
        return $this->container['ring_size'];
    }

    /**
     * Sets ring_size.
     *
     * @param null|string $ring_size the ring size variation of an item
     */
    public function setRingSize(?string $ring_size) : self
    {
        $this->container['ring_size'] = $ring_size;

        return $this;
    }

    /**
     * Gets shaft_material.
     */
    public function getShaftMaterial() : ?string
    {
        return $this->container['shaft_material'];
    }

    /**
     * Sets shaft_material.
     *
     * @param null|string $shaft_material the shaft material variation of an item
     */
    public function setShaftMaterial(?string $shaft_material) : self
    {
        $this->container['shaft_material'] = $shaft_material;

        return $this;
    }

    /**
     * Gets scent.
     */
    public function getScent() : ?string
    {
        return $this->container['scent'];
    }

    /**
     * Sets scent.
     *
     * @param null|string $scent the scent variation of an item
     */
    public function setScent(?string $scent) : self
    {
        $this->container['scent'] = $scent;

        return $this;
    }

    /**
     * Gets size.
     */
    public function getSize() : ?string
    {
        return $this->container['size'];
    }

    /**
     * Sets size.
     *
     * @param null|string $size the size variation of an item
     */
    public function setSize(?string $size) : self
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets size_per_pearl.
     */
    public function getSizePerPearl() : ?string
    {
        return $this->container['size_per_pearl'];
    }

    /**
     * Sets size_per_pearl.
     *
     * @param null|string $size_per_pearl the size per pearl variation of an item
     */
    public function setSizePerPearl(?string $size_per_pearl) : self
    {
        $this->container['size_per_pearl'] = $size_per_pearl;

        return $this;
    }

    /**
     * Gets golf_club_loft.
     */
    public function getGolfClubLoft() : ?DecimalWithUnits
    {
        return $this->container['golf_club_loft'];
    }

    /**
     * Sets golf_club_loft.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\CatalogItemDeprecated\DecimalWithUnits $golf_club_loft golf_club_loft
     */
    public function setGolfClubLoft(?DecimalWithUnits $golf_club_loft) : self
    {
        $this->container['golf_club_loft'] = $golf_club_loft;

        return $this;
    }

    /**
     * Gets total_diamond_weight.
     */
    public function getTotalDiamondWeight() : ?DecimalWithUnits
    {
        return $this->container['total_diamond_weight'];
    }

    /**
     * Sets total_diamond_weight.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\CatalogItemDeprecated\DecimalWithUnits $total_diamond_weight total_diamond_weight
     */
    public function setTotalDiamondWeight(?DecimalWithUnits $total_diamond_weight) : self
    {
        $this->container['total_diamond_weight'] = $total_diamond_weight;

        return $this;
    }

    /**
     * Gets total_gem_weight.
     */
    public function getTotalGemWeight() : ?DecimalWithUnits
    {
        return $this->container['total_gem_weight'];
    }

    /**
     * Sets total_gem_weight.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\CatalogItemDeprecated\DecimalWithUnits $total_gem_weight total_gem_weight
     */
    public function setTotalGemWeight(?DecimalWithUnits $total_gem_weight) : self
    {
        $this->container['total_gem_weight'] = $total_gem_weight;

        return $this;
    }

    /**
     * Gets package_quantity.
     */
    public function getPackageQuantity() : ?int
    {
        return $this->container['package_quantity'];
    }

    /**
     * Sets package_quantity.
     *
     * @param null|int $package_quantity the package quantity variation of an item
     */
    public function setPackageQuantity(?int $package_quantity) : self
    {
        $this->container['package_quantity'] = $package_quantity;

        return $this;
    }

    /**
     * Gets item_dimensions.
     */
    public function getItemDimensions() : ?DimensionType
    {
        return $this->container['item_dimensions'];
    }

    /**
     * Sets item_dimensions.
     *
     * @param null|\AmazonPHP\SellingPartner\Model\CatalogItemDeprecated\DimensionType $item_dimensions item_dimensions
     */
    public function setItemDimensions(?DimensionType $item_dimensions) : self
    {
        $this->container['item_dimensions'] = $item_dimensions;

        return $this;
    }

    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param int $offset Offset
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param int $offset Offset
     *
     * @return null|mixed
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param null|int $offset Offset
     * @param mixed $value Value to be set
     */
    public function offsetSet($offset, $value) : void
    {
        if (null === $offset) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param int $offset Offset
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     *
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed returns data which can be serialized by json_encode(), which is a value
     *               of any type other than a resource
     */
    public function jsonSerialize() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }

    /**
     * Gets a header-safe presentation of the object.
     */
    public function toHeaderValue() : string
    {
        return \json_encode(ObjectSerializer::sanitizeForSerialization($this), JSON_THROW_ON_ERROR);
    }
}
