<?php

declare(strict_types=1);


namespace AmazonPHP\SellingPartner\Model\FBAInbound;

use \ArrayAccess;
use \AmazonPHP\SellingPartner\ObjectSerializer;
use \AmazonPHP\SellingPartner\ModelInterface;
use \AmazonPHP\SellingPartner\Exception\AssertionException;

/**
* The Selling Partner API for FBA inbound operations.
*
* The Selling Partner API for Fulfillment By Amazon (FBA) Inbound. The FBA Inbound API enables building inbound workflows to create, manage, and send shipments into Amazon's fulfillment network. The API has interoperability with the Send-to-Amazon user interface.
*
* The version of the OpenAPI document: 2024-03-20
*
* This class was auto-generated by https://openapi-generator.tech
* Do not change it, it will be overwritten with next execution of /bin/generate.sh
 *
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class BoxInput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static string $openAPIModelName = 'BoxInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static array $openAPITypes = [
        'box_id' => 'string',
        'content_information_source' => '\AmazonPHP\SellingPartner\Model\FBAInbound\BoxContentInformationSource',
        'contents' => '\AmazonPHP\SellingPartner\Model\FBAInbound\BoxContent[]',
        'dimensions' => '\AmazonPHP\SellingPartner\Model\FBAInbound\Dimensions',
        'quantity' => 'int',
        'template_name' => 'string',
        'weight' => '\AmazonPHP\SellingPartner\Model\FBAInbound\Weight'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static array $openAPIFormats = [
        'box_id' => null,
        'content_information_source' => null,
        'contents' => null,
        'dimensions' => null,
        'quantity' => null,
        'template_name' => null,
        'weight' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes() : array
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats() : array
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static array $attributeMap = [
        'box_id' => 'boxId',
        'content_information_source' => 'contentInformationSource',
        'contents' => 'contents',
        'dimensions' => 'dimensions',
        'quantity' => 'quantity',
        'template_name' => 'templateName',
        'weight' => 'weight'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static array $setters = [
        'box_id' => 'setBoxId',
        'content_information_source' => 'setContentInformationSource',
        'contents' => 'setContents',
        'dimensions' => 'setDimensions',
        'quantity' => 'setQuantity',
        'template_name' => 'setTemplateName',
        'weight' => 'setWeight'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static array $getters = [
        'box_id' => 'getBoxId',
        'content_information_source' => 'getContentInformationSource',
        'contents' => 'getContents',
        'dimensions' => 'getDimensions',
        'quantity' => 'getQuantity',
        'template_name' => 'getTemplateName',
        'weight' => 'getWeight'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap() : array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters() : array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters() : array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName() : string
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected array $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['box_id'] = $data['box_id'] ?? null;
        $this->container['content_information_source'] = $data['content_information_source'] ?? null;
        $this->container['contents'] = $data['contents'] ?? null;
        $this->container['dimensions'] = $data['dimensions'] ?? null;
        $this->container['quantity'] = $data['quantity'] ?? null;
        $this->container['template_name'] = $data['template_name'] ?? null;
        $this->container['weight'] = $data['weight'] ?? null;
    }

    /**
     * Validate all properties.
     *
     * @throws AssertionException
     */
    public function validate() : void
    {
        if (!is_null($this->container['box_id']) && (mb_strlen($this->container['box_id']) > 1024)) {
            throw new AssertionException("invalid value for 'box_id', the character length must be smaller than or equal to 1024.");
        }

        if (!is_null($this->container['box_id']) && (mb_strlen($this->container['box_id']) < 1)) {
            throw new AssertionException("invalid value for 'box_id', the character length must be bigger than or equal to 1.");
        }

        if ($this->container['content_information_source'] === null) {
            throw new AssertionException("'content_information_source' can't be null");
        }

        if ($this->container['dimensions'] === null) {
            throw new AssertionException("'dimensions' can't be null");
        }

            $this->container['dimensions']->validate();

        if ($this->container['quantity'] === null) {
            throw new AssertionException("'quantity' can't be null");
        }

        if (($this->container['quantity'] > 10000)) {
            throw new AssertionException("invalid value for 'quantity', must be smaller than or equal to 10000.");
        }

        if (($this->container['quantity'] < 1)) {
            throw new AssertionException("invalid value for 'quantity', must be bigger than or equal to 1.");
        }

        if ($this->container['template_name'] === null) {
            throw new AssertionException("'template_name' can't be null");
        }

        if ((mb_strlen($this->container['template_name']) > 1024)) {
            throw new AssertionException("invalid value for 'template_name', the character length must be smaller than or equal to 1024.");
        }

        if ((mb_strlen($this->container['template_name']) < 1)) {
            throw new AssertionException("invalid value for 'template_name', the character length must be bigger than or equal to 1.");
        }

        if ($this->container['weight'] === null) {
            throw new AssertionException("'weight' can't be null");
        }

            $this->container['weight']->validate();

    }


    /**
     * Gets box_id
     *
     * @return string|null
     */
    public function getBoxId()
    {
        return $this->container['box_id'];
    }

    /**
     * Sets box_id
     *
     * @param string|null $box_id The ID of the box to update that was provided by Amazon. This ID is comprised of the external shipment ID         (which is generated after transportation has been confirmed) and the index of the box.
     *
     * @return self
     */
    public function setBoxId($box_id) : self
    {
        $this->container['box_id'] = $box_id;

        return $this;
    }

    /**
     * Gets content_information_source
     *
     * @return \AmazonPHP\SellingPartner\Model\FBAInbound\BoxContentInformationSource
     */
    public function getContentInformationSource()
    {
        return $this->container['content_information_source'];
    }

    /**
     * Sets content_information_source
     *
     * @param \AmazonPHP\SellingPartner\Model\FBAInbound\BoxContentInformationSource $content_information_source content_information_source
     *
     * @return self
     */
    public function setContentInformationSource($content_information_source) : self
    {
        $this->container['content_information_source'] = $content_information_source;

        return $this;
    }

    /**
     * Gets contents
     *
     * @return \AmazonPHP\SellingPartner\Model\FBAInbound\BoxContent[]|null
     */
    public function getContents()
    {
        return $this->container['contents'];
    }

    /**
     * Sets contents
     *
     * @param \AmazonPHP\SellingPartner\Model\FBAInbound\BoxContent[]|null $contents The Contents of the box containing a list of MSKUs and their quantity. If `boxAttribute` is `BARCODE_2D` or `MANUAL_PROCESS`, user should provide ALL of the items that could be in the box, without specifying item quantities.
     *
     * @return self
     */
    public function setContents($contents) : self
    {
        $this->container['contents'] = $contents;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \AmazonPHP\SellingPartner\Model\FBAInbound\Dimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \AmazonPHP\SellingPartner\Model\FBAInbound\Dimensions $dimensions dimensions
     *
     * @return self
     */
    public function setDimensions($dimensions) : self
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The number of containers where all other properties like weight or dimensions are identical.
     *
     * @return self
     */
    public function setQuantity($quantity) : self
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets template_name
     *
     * @return string
     */
    public function getTemplateName()
    {
        return $this->container['template_name'];
    }

    /**
     * Sets template_name
     *
     * @param string $template_name The seller-provided name for a 'type' of box (or a group of boxes with the same contents), which will be used to identify all created boxes of that type. When providing bulk box information, this value must be unique from the other box types. When providing individual boxes with existing IDs, this value can be shared between many boxes that have the same contents.
     *
     * @return self
     */
    public function setTemplateName($template_name) : self
    {
        $this->container['template_name'] = $template_name;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return \AmazonPHP\SellingPartner\Model\FBAInbound\Weight
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param \AmazonPHP\SellingPartner\Model\FBAInbound\Weight $weight weight
     *
     * @return self
     */
    public function setWeight($weight) : self
    {
        $this->container['weight'] = $weight;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @return boolean
     */
    public function offsetExists($offset) : bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @return void
     */
    public function offsetSet($offset, $value) : void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @return void
     */
    public function offsetUnset($offset) : void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize() : string
    {
       return \json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString() : string
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue() : string
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

